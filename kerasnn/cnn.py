from __future__ import print_functionimport osimport sys#os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"   # see issue #152#os.environ["CUDA_VISIBLE_DEVICES"] = ""os.environ['TF_CPP_MIN_LOG_LEVEL']='2'import kerasfrom keras.layers import Dense, Flatten, Dropoutfrom keras.layers import Conv2D, MaxPooling2Dfrom keras.layers import PReLUfrom keras.models import Sequentialfrom keras.utils import plot_modelimport matplotlib.pylab as pltfrom sklearn.metrics import roc_auc_score, roc_curve, aucimport genInputdata  = genInput.GenInput(dir="../database/DDSM_1")batchSize = 5numClasses = len(data.labels)epochs = 1000inputShape = data.dimensionsmodel = Sequential()model.add(Conv2D(96, kernel_size=(30, 30), strides=(1, 1),                 activation="relu",                 input_shape=inputShape))model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))model.add(Conv2D(256, (20, 20), activation="relu"))model.add(MaxPooling2D(pool_size=(2, 2)))model.add(Conv2D(384, (10, 10), activation="relu"))#model.add(Conv2D(384, (8, 8), activation="relu"))model.add(MaxPooling2D(pool_size=(2, 2)))model.add(Conv2D(256, (4, 4), activation="relu"))model.add(MaxPooling2D(pool_size=(2, 2)))model.add(Flatten())model.add(Dense(2048, activation='relu'))model.add(Dense(2048, activation='relu'))model.add(Dropout(rate=0.5))model.add(Dense(numClasses, activation='softmax'))model.compile(loss=keras.losses.categorical_crossentropy,              optimizer=keras.optimizers.Adam(),              metrics=['accuracy'])class AccuracyHistory(keras.callbacks.Callback):    def on_train_begin(self, logs={}):        self.acc = []    def on_epoch_end(self, batch, logs={}):        self.acc.append(logs.get('acc'))        #y_pred = self.model.predict_proba(data.inputs["images"]["testing"], verbose=0)        #rauc = roc_auc_score(data.inputs["labels"]["testing"], y_pred)        #print("- AUC:", rauc)history = AccuracyHistory()model.fit(data.inputs["images"]["training"], data.inputs["labels"]["training"],          batch_size=batchSize,          epochs=epochs,          verbose=1,          validation_data=(data.inputs["images"]["testing"], data.inputs["labels"]["testing"]),          callbacks=[history])score = model.evaluate(data.inputs["images"]["validation"], data.inputs["labels"]["validation"], verbose=0)y_pred = model.predict_proba(data.inputs["images"]["validation"])rauc2 = roc_auc_score(data.inputs["labels"]["validation"], y_pred)fp, tp, thr = roc_curve(data.inputs["labels"]["validation"][:,1], y_pred[:,1])rauc = auc(fp,tp)print(y_pred)print('\nAUC:', rauc)print('AUC2:', rauc2)print('Test loss:', score[0])print('Test accuracy:', score[1])print(fp,tp)#plot_model(model, to_file='model.png')plt.subplot(121)plt.plot(range(1, epochs+1), history.acc)plt.xlabel('Epochs')plt.ylabel('Accuracy')#plt.show()plt.subplot(122)plt.title('Receiver Operating Characteristic')plt.plot(fp, tp, 'b',label='AUC = %0.2f'% rauc)plt.legend(loc='lower right')plt.plot([0,1],[0,1],'r--')plt.xlim([-0.1,1.2])plt.ylim([-0.1,1.2])plt.ylabel('True Positive Rate')plt.xlabel('False Positive Rate')plt.show()'''with open("runs.txt", "a+") as fp:    fp.write("- Run %s\n" % sys.argv[1])    fp.write("AUC: %.5f\n"% rauc)    fp.write("Test loss: %.5f\n" % score[0])    fp.write("Test accuracy: %.5f\n\n" % score[1])'''